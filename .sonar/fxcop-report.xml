<?xml version="1.0" encoding="utf-8"?>
<FxCopReport Version="12.0">
 <Targets>
  <Target Name="C:\Users\Moh\Documents\Visual Studio 2013\Projects\DataBaseGenerator\DataBaseGenerator\bin\Debug\DataBaseGenerator.exe">
   <Modules>
    <Module Name="databasegenerator.exe">
     <Messages>
      <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="NonBreaking" BreaksBuild="True">
       <Issue Name="NoStrongName" Certainty="95" Level="CriticalError">Sign 'DataBaseGenerator.exe' with a strong name key.</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="NonBreaking" BreaksBuild="True">
       <Issue Certainty="95" Level="Error">Mark 'DataBaseGenerator.exe' with CLSCompliant(true) because it exposes externally visible types.</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithNeutralResourcesLanguage" Category="Microsoft.Performance" CheckId="CA1824" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="NonBreaking" BreaksBuild="True">
       <Issue Certainty="95" Level="Warning">Because assembly 'DataBaseGenerator.exe' contains a ResX-based resource file, mark it with the NeutralResourcesLanguage attribute, specifying the language of the resources within the assembly. This could improve lookup performance the first time a resource is retrieved.</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="DataBaseGenerator">
       <Types>
        <Type Name="DbGenerator" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Db" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="Breaking" BreaksBuild="True">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Db' in type name 'DbGenerator' by changing it to 'DB'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Generate(System.Collections.Generic.List`1&lt;DataBaseGenerator.ModelObject&gt;,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Console.Write(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Moh\Documents\Visual Studio 2013\Projects\DataBaseGenerator\DataBaseGenerator" File="DbGenerator.cs" Line="29">Method 'DbGenerator.Generate(List&lt;ModelObject&gt;, string)' passes a literal string as parameter 'value' of a call to 'Console.Write(string)'. Retrieve the following string(s) from a resource table instead: "File error".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\Moh\Documents\Visual Studio 2013\Projects\DataBaseGenerator\DataBaseGenerator" File="DbGenerator.cs" Line="27">Modify 'DbGenerator.Generate(List&lt;ModelObject&gt;, string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Certainty="95" Level="Error" Path="c:\Users\Moh\Documents\Visual Studio 2013\Projects\DataBaseGenerator\DataBaseGenerator" File="DbGenerator.cs" Line="19">Change 'List&lt;ModelObject&gt;' in 'DbGenerator.Generate(List&lt;ModelObject&gt;, string)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="Generatedfile" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\Users\Moh\Documents\Visual Studio 2013\Projects\DataBaseGenerator\DataBaseGenerator" File="DbGenerator.cs" Line="19">In member 'DbGenerator.Generate(List&lt;ModelObject&gt;, string)', correct the casing of 'Generatedfile' in parameter name 'GeneratedfilePath' by changing it to 'generatedfile'.</Issue>
            </Message>
            <Message Id="ex" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Certainty="95" Level="Warning" Path="c:\Users\Moh\Documents\Visual Studio 2013\Projects\DataBaseGenerator\DataBaseGenerator" File="DbGenerator.cs" Line="27">'DbGenerator.Generate(List&lt;ModelObject&gt;, string)' declares a variable, 'ex', of type 'Exception', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Moh\Documents\Visual Studio 2013\Projects\DataBaseGenerator\DataBaseGenerator" File="DbGenerator.cs" Line="32">In externally visible method 'DbGenerator.Generate(List&lt;ModelObject&gt;, string)', validate parameter 'objects' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GenerateHeaderInsertSqript(DataBaseGenerator.ModelObject)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Certainty="95" Level="Warning" Path="c:\Users\Moh\Documents\Visual Studio 2013\Projects\DataBaseGenerator\DataBaseGenerator" File="DbGenerator.cs" Line="211">The 'this' parameter (or 'Me' in Visual Basic) of 'DbGenerator.GenerateHeaderInsertSqript(ModelObject)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GenerateSingleObject(DataBaseGenerator.ModelObject,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Users\Moh\Documents\Visual Studio 2013\Projects\DataBaseGenerator\DataBaseGenerator" File="DbGenerator.cs" Line="83">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'DbGenerator.GenerateSingleObject(ModelObject, int)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\Moh\Documents\Visual Studio 2013\Projects\DataBaseGenerator\DataBaseGenerator" File="DbGenerator.cs" Line="83">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'DbGenerator.GenerateSingleObject(ModelObject, int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\Moh\Documents\Visual Studio 2013\Projects\DataBaseGenerator\DataBaseGenerator" File="DbGenerator.cs" Line="132">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'DbGenerator.GenerateSingleObject(ModelObject, int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetRandomFromDico(System.String[])" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Certainty="95" Level="Warning" Path="c:\Users\Moh\Documents\Visual Studio 2013\Projects\DataBaseGenerator\DataBaseGenerator" File="DbGenerator.cs" Line="182">The 'this' parameter (or 'Me' in Visual Basic) of 'DbGenerator.GetRandomFromDico(string[])' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetStringArrayFromFile(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Certainty="95" Level="Warning" Path="c:\Users\Moh\Documents\Visual Studio 2013\Projects\DataBaseGenerator\DataBaseGenerator" File="DbGenerator.cs" Line="191">The 'this' parameter (or 'Me' in Visual Basic) of 'DbGenerator.GetStringArrayFromFile(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteToFile(System.String,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Console.Write(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\Users\Moh\Documents\Visual Studio 2013\Projects\DataBaseGenerator\DataBaseGenerator" File="DbGenerator.cs" Line="247">Method 'DbGenerator.WriteToFile(string, string)' passes a literal string as parameter 'value' of a call to 'Console.Write(string)'. Retrieve the following string(s) from a resource table instead: "File error".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\Moh\Documents\Visual Studio 2013\Projects\DataBaseGenerator\DataBaseGenerator" File="DbGenerator.cs" Line="245">Modify 'DbGenerator.WriteToFile(string, string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Certainty="95" Level="Warning" Path="c:\Users\Moh\Documents\Visual Studio 2013\Projects\DataBaseGenerator\DataBaseGenerator" File="DbGenerator.cs" Line="234">The 'this' parameter (or 'Me' in Visual Basic) of 'DbGenerator.WriteToFile(string, string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="ex" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Certainty="95" Level="Warning" Path="c:\Users\Moh\Documents\Visual Studio 2013\Projects\DataBaseGenerator\DataBaseGenerator" File="DbGenerator.cs" Line="245">'DbGenerator.WriteToFile(string, string)' declares a variable, 'ex', of type 'Exception', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="GenerationMode" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#equalTo" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="equal" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'equal' in member name 'GenerationMode.equalTo' by changing it to 'Equal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#fixedValue" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="fixed" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'fixed' in member name 'GenerationMode.fixedValue' by changing it to 'Fixed'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#randomValue" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="random" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'random' in member name 'GenerationMode.randomValue' by changing it to 'Random'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#startValue" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="start" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'start' in member name 'GenerationMode.startValue' by changing it to 'Start'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MainWindow" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddObjectPannel(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Moh\Documents\Visual Studio 2013\Projects\DataBaseGenerator\DataBaseGenerator" File="MainWindow.xaml.cs" Line="55">'MainWindow.AddObjectPannel(string)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Button_Click(System.Object,System.Windows.RoutedEventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Certainty="95" Level="Error" Path="c:\Users\Moh\Documents\Visual Studio 2013\Projects\DataBaseGenerator\DataBaseGenerator" File="MainWindow.xaml.cs" Line="103">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'MainWindow.Button_Click(object, RoutedEventArgs)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\Moh\Documents\Visual Studio 2013\Projects\DataBaseGenerator\DataBaseGenerator" File="MainWindow.xaml.cs" Line="103">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'MainWindow.Button_Click(object, RoutedEventArgs)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GenerateObjectsDescription_Click(System.Object,System.Windows.RoutedEventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="Objects" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="Local" Certainty="95" Level="Error" Path="c:\Users\Moh\Documents\Visual Studio 2013\Projects\DataBaseGenerator\DataBaseGenerator" File="MainWindow.xaml.cs" Line="77">'Objects', a variable declared in 'MainWindow.GenerateObjectsDescription_Click(object, RoutedEventArgs)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Objects" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Certainty="75" Level="Warning">It appears that field 'MainWindow.Objects' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Windows.Markup.IComponentConnector.Connect(System.Int32,System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="c:\Users\Moh\Documents\Visual Studio 2013\Projects\DataBaseGenerator\DataBaseGenerator" File="MainWindow.xaml" Line="8">'target', a parameter, is cast to type 'Button' multiple times in method 'MainWindow.IComponentConnector.Connect(int, object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="c:\Users\Moh\Documents\Visual Studio 2013\Projects\DataBaseGenerator\DataBaseGenerator" File="MainWindow.xaml" Line="12">'target', a parameter, is cast to type 'Button' multiple times in method 'MainWindow.IComponentConnector.Connect(int, object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="NonBreaking" BreaksBuild="True">
             <Issue Certainty="95" Level="Error" Path="c:\Users\Moh\Documents\Visual Studio 2013\Projects\DataBaseGenerator\DataBaseGenerator" File="MainWindow.xaml" Line="8">Make 'MainWindow' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IComponentConnector.Connect(int, object)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ModelObject" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Dependecies" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Certainty="75" Level="Warning">Change 'ModelObject.Dependecies' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Certainty="95" Level="Error">Change 'List&lt;string&gt;' in 'ModelObject.Dependecies' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Properties" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Certainty="75" Level="Warning">Change 'ModelObject.Properties' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Certainty="95" Level="Error">Change 'List&lt;Property&gt;' in 'ModelObject.Properties' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Property" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Property" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="Breaking" BreaksBuild="True">
           <Issue Name="Type" Certainty="95" Level="Error">Rename type 'Property' so that it no longer conflicts with the reserved language keyword 'Property'. Using a reserved keyword as the name of a type makes it harder for consumers in other languages to use the type.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Type" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Name="BaseType" Certainty="95" Level="Error">The property name 'Property.Type' is confusing given the existence of inherited method 'object.GetType()'. Rename or remove this property.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="XmlParser" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#parseModel(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Certainty="95" Level="Error" Path="c:\Users\Moh\Documents\Visual Studio 2013\Projects\DataBaseGenerator\DataBaseGenerator" File="XmlParser.cs" Line="13">Change 'List&lt;ModelObject&gt;' in 'XmlParser.parseModel(string)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="parse" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="Breaking" BreaksBuild="True">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\Users\Moh\Documents\Visual Studio 2013\Projects\DataBaseGenerator\DataBaseGenerator" File="XmlParser.cs" Line="13">Correct the casing of 'parse' in member name 'XmlParser.parseModel(string)' by changing it to 'Parse'.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="DependsOnFix" BreaksBuild="True">
             <Issue Certainty="95" Level="Warning" Path="c:\Users\Moh\Documents\Visual Studio 2013\Projects\DataBaseGenerator\DataBaseGenerator" File="XmlParser.cs" Line="13">The 'this' parameter (or 'Me' in Visual Basic) of 'XmlParser.parseModel(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="DataBaseGenerator.Properties">
       <Types>
        <Type Name="Resources" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Messages>
          <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="NonBreaking" BreaksBuild="True">
           <Issue Certainty="75" Level="Warning">'Resources' is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Culture" Kind="Property" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_Culture()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="NonBreaking" BreaksBuild="True">
               <Issue Certainty="75" Level="Warning" Path="c:\Users\Moh\Documents\Visual Studio 2013\Projects\DataBaseGenerator\DataBaseGenerator\Properties" File="Resources.Designer.cs" Line="62">'Resources.Culture.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_Culture(System.Globalization.CultureInfo)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="NonBreaking" BreaksBuild="True">
               <Issue Certainty="75" Level="Warning" Path="c:\Users\Moh\Documents\Visual Studio 2013\Projects\DataBaseGenerator\DataBaseGenerator\Properties" File="Resources.Designer.cs" Line="66">'Resources.Culture.set(CultureInfo)' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#ResourceManager" Kind="Property" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_ResourceManager()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="NonBreaking" BreaksBuild="True">
               <Issue Certainty="75" Level="Warning" Path="c:\Users\Moh\Documents\Visual Studio 2013\Projects\DataBaseGenerator\DataBaseGenerator\Properties" File="Resources.Designer.cs" Line="44">'Resources.ResourceManager.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="Settings" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#Default" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_Default()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-05-19 14:46:06Z" FixCategory="NonBreaking" BreaksBuild="True">
               <Issue Certainty="75" Level="Warning" Path="c:\Users\Moh\Documents\Visual Studio 2013\Projects\DataBaseGenerator\DataBaseGenerator\Properties" File="Settings.Designer.cs" Line="25">'Settings.Default.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" BreaksBuild="True">
   <Name>Assemblies should have valid strong names</Name>
   <Description>Either the assembly has no strong name, an invalid one, or the strong name is valid only because of the computer configuration. The assembly should not be deployed in this state. The most common causes of this are: 1) The assembly's contents were modified after it was signed. 2) The signing process failed. 3) The assembly was delay-signed. 4) A registry key existed that allowed the check to pass (where it would not have otherwise).</Description>
   <Resolution Name="NoStrongName">Sign {0} with a strong name key.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182127.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" BreaksBuild="True">
   <Name>Avoid uncalled private code</Name>
   <Description>There is uncalled code that is not externally visible and is not a known runtime entry point. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Resolution Name="Default">{0} appears to have no upstream public or protected callers.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182264.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" BreaksBuild="True">
   <Name>Avoid uninstantiated internal classes</Name>
   <Description>An internal class was detected that is apparently never instantiated. This rule does not attempt to detect late-bound creation and will generate false positives if instances of a type are only created in this way (for example, by means of Activator.CreateInstance or by passing the type as an argument to a TypeConverter constructor).</Description>
   <Resolution Name="Default">{0} is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182265.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" BreaksBuild="True">
   <Name>Avoid unused private fields</Name>
   <Description>Private fields were detected that do not appear to be accessed within the assembly. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Resolution Name="Default">It appears that field {0} is never used or is only ever assigned to. Use this field or remove it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms245042.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" BreaksBuild="True">
   <Name>Collection properties should be read only</Name>
   <Description>Properties that return collections should be read-only so that users cannot entirely replace the backing store. Users can still modify the contents of the collection by calling relevant methods on the collection. Note that the XmlSerializer class has special support for deserializing read-only collections. See the XmlSerializer overview for more information.</Description>
   <Resolution Name="Default">Change {0} to be read-only by removing the property setter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182327.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" BreaksBuild="True">
   <Name>Do not pass literals as localized parameters</Name>
   <Description>Literal strings that are embedded in source code are difficult to localize. Avoid passing literal strings as arguments in circumstances where a localized string is generally expected.</Description>
   <Resolution Name="KnownValue">Method {0} passes a literal string as parameter '{1}' of a call to {2}. Retrieve the following string(s) from a resource table instead: {3}.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182187.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" BreaksBuild="True">
   <Name>Do not cast unnecessarily</Name>
   <Description>Avoid duplicate casts where possible, since there is a cost associated with them.</Description>
   <Resolution Name="Parameter">{0}, a parameter, is cast to type {1} multiple times in method {2}. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant {3} instruction.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182271.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" BreaksBuild="True">
   <Name>Do not catch general exception types</Name>
   <Description>You should not catch Exception or SystemException. Catching generic exception types can hide run-time problems from the library user, and can complicate debugging. You should catch only those exceptions that you can handle gracefully.</Description>
   <Resolution Name="Default">Modify {0} to catch a more specific exception than {1} or rethrow the exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182137.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" BreaksBuild="True">
   <Name>Do not expose generic lists</Name>
   <Description>Do not expose List&lt;T&gt; in object models. Use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt; instead. List&lt;T&gt; is meant to be used from implementation, not in object model API. List&lt;T&gt; is optimized for performance at the cost of long term versioning. For example, if you return List&lt;T&gt; to the client code, you will not ever be able to receive notifications when client code modifies the collection.</Description>
   <Resolution Name="Default">Change {0} in {1} to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182142.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" BreaksBuild="True">
   <Name>Identifiers should be cased correctly</Name>
   <Description>Type, namespace, and member identifiers are Pascal-cased. Parameter identifiers are camel-cased. Two letter acronyms within these identifiers should be upper-cased, for example, use System.IO instead of System.Io. Acronyms of three or more letters should be Pascal-cased, for example, use System.Xml instead of System.XML. The pascal-casing convention capitalizes the first letter of each word, as in BackColor. The camel-casing convention formats the first letter of the first word in lowercase and capitalizes the first letter of all subsequent words, as in backgroundColor. Although it may be common practice for some two letter acronyms to not be fully capitalized, violations of this rule should not be excluded for this reason. For example, 'DbConnection', is common but incorrect; use DBConnection. A violation of this rule might be required for compatibility with existing, non-managed symbol schemes. In general, however, these symbols should not be visible outside the assembly that uses them.</Description>
   <Resolution Name="Member">Correct the casing of '{0}' in member name {1} by changing it to '{2}'.</Resolution>
   <Resolution Name="MemberParameter">In member {0}, correct the casing of '{1}' in parameter name {2} by changing it to '{3}'.</Resolution>
   <Resolution Name="Type">Correct the casing of '{0}' in type name {1} by changing it to '{2}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182240.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" BreaksBuild="True">
   <Name>Identifiers should not match keywords</Name>
   <Description>Identifiers which conflict with reserved language keywords should be avoided. Using a reserved keyword as an identifier makes it harder for consumers in other languages to use your API.</Description>
   <Resolution Name="Type">Rename type {0} so that it no longer conflicts with the reserved language keyword '{1}'. Using a reserved keyword as the name of a type makes it harder for consumers in other languages to use the type.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182248.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" BreaksBuild="True">
   <Name>Interface methods should be callable by child types</Name>
   <Description>Explicit method implementations are defined with private accessibility. Classes that derive from classes with explicit method implementations and choose to re-declare them on the class will not be able to call into the base class implementation unless the base class has provided an alternate method with appropriate accessibility. When overriding a base class method that has been hidden by explicit interface implementation, in order to call into the base class implementation, a derived class must cast the base pointer to the relevant interface. When calling through this reference, however, the derived class implementation will actually be invoked, resulting in recursion and an eventual stack overflow.</Description>
   <Resolution Name="Default">Make {0} sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of {1} and is visible to derived classes.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182153.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014" BreaksBuild="True">
   <Name>Mark assemblies with CLSCompliantAttribute</Name>
   <Description>Assemblies should explicitly state their CLS compliance using the CLSCompliant attribute. An assembly without this attribute is not CLS-compliant. Assemblies, modules, and types can be CLS-compliant even if some parts of the assembly, module, or type are not CLS-compliant. The following rules apply: 1) If the element is marked CLSCompliant, any noncompliant members must have the CLSCompliant attribute present with its argument set to false. 2) A comparable CLS-compliant alternative member must be supplied for each member that is not CLS-compliant.</Description>
   <Resolution Name="Default">Mark {0} with CLSCompliant(true) because it exposes externally visible types.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182156.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithNeutralResourcesLanguage" Category="Microsoft.Performance" CheckId="CA1824" BreaksBuild="True">
   <Name>Mark assemblies with NeutralResourcesLanguageAttribute</Name>
   <Description>The NeutralResourcesLanguage attribute informs the ResourceManager of the language used to render the neutral culture's resources for an assembly. When looking up resources in the same culture as the neutral resources language, the ResourceManager automatically uses the resources located in the main assembly, instead of searching for a satellite assembly with the current user interface culture for the current thread. This will improve lookup performance for the first resource you load and can reduce your working set.</Description>
   <Resolution Name="Default">Because assembly {0} contains a ResX-based resource file, mark it with the NeutralResourcesLanguage attribute, specifying the language of the resources within the assembly. This could improve lookup performance the first time a resource is retrieved.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb385967.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" BreaksBuild="True">
   <Name>Mark members as static</Name>
   <Description>Methods which do not access instance data or call instance methods can be marked as static (Shared in Visual Basic). After doing so, the compiler will emit non-virtual call sites to these members which will prevent a check at runtime for each call that ensures the current object pointer is non-null. This can result in a measurable performance gain for performance-sensitive code. In some cases, the failure to access the current object instance represents a correctness issue.</Description>
   <Resolution Name="Default">The 'this' parameter (or 'Me' in Visual Basic) of {0} is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms245046.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721" BreaksBuild="True">
   <Name>Property names should not match get methods</Name>
   <Description>A Get method was found with the same name as a property. Get methods and properties should have names that clearly distinguish their function. See the design guidelines for information regarding choosing properties over methods.</Description>
   <Resolution Name="BaseType">The property name {0} is confusing given the existence of inherited method {1}. Rename or remove this property.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182253.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" BreaksBuild="True">
   <Name>Remove unused locals</Name>
   <Description>Remove locals that are not used or are only assigned to in method implementations.</Description>
   <Resolution Name="Default">{0} declares a variable, {1}, of type {2}, which is never used or is only assigned to. Use this variable or remove it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182278.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" BreaksBuild="True">
   <Name>Specify CultureInfo</Name>
   <Description>If an overload exists that takes a CultureInfo argument, it should always be called in favor of an overload that does not. The CultureInfo type contains culture-specific information required for performing numeric and string operations, such as casing, formatting, and string comparisons. In scenarios where conversion and parsing behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182189.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" BreaksBuild="True">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="IFormatProviderAlternate">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be based on input from the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify {4}.</Resolution>
   <Resolution Name="IFormatProviderAlternateString">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify {4}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182190.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" BreaksBuild="True">
   <Name>Validate arguments of public methods</Name>
   <Description>All reference arguments passed to externally visible methods should be checked against null (Nothing in VB). If appropriate, throw a System.ArgumentNullException when the argument is null.</Description>
   <Resolution Name="Default">In externally visible method {0}, validate parameter '{1}' before using it.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182182.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" BreaksBuild="True">
   <Name>Variable names should not match field names</Name>
   <Description>Instance field and variable names should not be identical within the same scope.</Description>
   <Resolution Name="Local">{0}, a variable declared in {1}, has the same name as an instance field on the type. Change the name of one of these items.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182216.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="maintainabilityrules.dll" Version="12.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
